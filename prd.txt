# 정신장애인 재활 목표 관리 플랫폼 - PRD v3.0

## 📌 Product Overview

### 제품명
정신장애인 재활 목표 관리 플랫폼 (Mental Health Rehabilitation Goal Management Platform)

### 제품 비전
정신장애인의 재활 과정을 체계적이고 과학적으로 관리하여, 환자의 실질적인 삶의 질 향상과 사회복지사의 업무 효율성을 극대화하는 AI 기반 통합 플랫폼

### 핵심 가치
- **구체성**: SMART 원칙 기반의 측정 가능한 목표 
- **개인화**: AI 기반 맞춤형 재활 계획 수립
- **효율성**: 자동화된 목표 관리 및 추적 시스템
- **신뢰성**: 데이터 무결성과 실시간 동기화 보장
- **단순성**: 단일 프론트엔드 아키텍처로 배포 복잡성 최소화

## 🎯 Problem Statement

### 현재 문제점
1. **목표 설정의 추상성**: "프로그램 참여 잘하기"와 같은 구체성 없는 목표로 인한 낮은 동기부여
2. **수작업 의존**: 목표 설정부터 추적까지 모든 과정이 수기로 진행되어 비효율적
3. **데이터 단절**: 환자 진행 상황의 체계적 추적 및 분석 불가
4. **피드백 부재**: 목표 달성 과정에서의 실시간 피드백 및 조정 메커니즘 부족
5. **업무 과부하**: 사회복지사의 반복적인 문서 작업으로 인한 핵심 업무 시간 부족

### 목표 사용자
- **Primary User**: 병원 소속 정신과 사회복지사
- **Secondary User**: 시스템 관리자 (다중 역할 지원)
- **Tertiary User**: 정신장애인 환자 (향후 확장)

## 🚀 Solution Overview

### 핵심 솔루션
1. **5단계 평가 시스템**: 환자의 현재 상태를 다각도로 평가
2. **AI 기반 목표 추천**: 평가 결과를 바탕으로 3가지 맞춤형 재활 계획 제시
3. **계층적 목표 관리**: 6개월 → 월간 → 주간 목표의 자동 생성 및 관리
4. **실시간 진행 추적**: 주간 체크인과 자동화된 진행률 계산
5. **데이터 기반 인사이트**: 환자별, 사회복지사별 성과 분석 대시보드
6. **간소화된 아키텍처**: 백엔드 서버 제거로 배포 복잡성 대폭 감소

## 🧩 Core Features & User Stories

### 1. 인증 및 권한 관리 (Authentication & Authorization) 🆕
**User Story**: "사용자로서, 안전하고 간편하게 로그인하여 내 권한에 맞는 기능만 접근하고 싶다"

**기능 상세**:
- **다중 역할 지원**: Administrator, Social Worker, Patient 역할
- **유연한 권한 시스템**: 복수 역할 할당 및 세분화된 권한 관리
- **Supabase Auth 통합**: PKCE 플로우 기반 인증
- **자동 토큰 갱신**: 사용자 경험 향상을 위한 무중단 인증
- **보안 강화**: Row Level Security (RLS) 기반 데이터 접근 제어

**데이터 구조**: `user_profiles`, `user_roles`, `permissions` 테이블

### 2. 환자 관리 (Patient Management)
**User Story**: "사회복지사로서, 환자의 기본 정보와 병력을 체계적으로 관리하고 싶다"

**기능 상세**:
- 환자 등록 및 기본 정보 입력
- 진단 정보 관리 (진단명, 진단일)
- 담당 사회복지사 배정
- 환자 상태 추적 (active, discharged)
- **향상된 검색**: 실시간 환자 검색 및 필터링

**데이터 구조**: `patients` 테이블

### 3. 평가 시스템 (Assessment System)
**User Story**: "사회복지사로서, 환자의 현재 상태를 5가지 항목으로 평가하여 AI가 정확한 목표를 추천받을 수 있도록 하고 싶다"

**기능 상세**:
- 5가지 평가 항목:
  - 집중 가능 시간 (5분/15분/30분/1시간)
  - 동기 수준 (1-10점)
  - 과거 성공 경험 (복수 선택)
  - 제약사항 (복수 선택)
  - 사회적 선호도 (개인/소그룹/대그룹)
- 평가 이력 관리
- 평가 결과 시각화
- **실시간 폴링**: AI 처리 상태 실시간 추적

**데이터 구조**: `assessments`, `assessment_options` 테이블

### 4. AI 목표 추천 (AI Goal Recommendation) 🔄
**User Story**: "사회복지사로서, 평가 결과를 바탕으로 AI가 추천하는 3가지 맞춤형 재활 계획을 받아보고 싶다"

**기능 상세** (완전히 새로워진 아키텍처):
- **직접 n8n 웹훅 호출**: 백엔드 서버 제거로 프론트엔드에서 직접 n8n 호출
- **향상된 데이터 구조**: 평가 데이터, 환자 정보, 나이/성별/진단 정보 통합 전송
- **실시간 처리 상태**: 폴링 시스템으로 AI 처리 진행상황 실시간 확인
- **구조화된 응답 처리**: n8n에서 직접 Supabase에 저장된 결과 조회
- 3가지 추천 계획 생성:
  - 각 계획별 6개월 목표 3개
  - 월간 목표 자동 분해
  - 주간 과제 자동 생성
- 추천 계획 비교 및 선택 UI
- 선택된 계획으로 목표 자동 생성

**데이터 구조**: `ai_goal_recommendations` 테이블
- `n8n_processing_status` 필드로 처리 상태 추적
- 구조화된 recommendations 배열 저장

### 5. 계층적 목표 관리 (Hierarchical Goal Management) 🔄
**User Story**: "사회복지사로서, 6개월 단위의 큰 목표가 월간, 주간 목표로 자동 분해되어 체계적으로 관리하고 싶다"

**기능 상세**:
- **개선된 목표 완료 시스템**: 사용자 확인 기반 목표 달성 처리
- **향상된 진행률 계산**: 하위 목표 완료에 따른 상위 목표 자동 업데이트
- 3단계 목표 계층 구조:
  - 6개월 목표 (3개)
  - 월간 목표 (각 6개월 목표당 6개)
  - 주간 목표 (각 월간 목표당 4개)
- 목표별 카테고리 지정
- 우선순위 설정
- 상태 관리 (pending, active, completed, on_hold, cancelled)
- 목표 수정 이력 추적

**데이터 구조**: `rehabilitation_goals`, `goal_categories`, `goal_history` 테이블

### 6. 진행 상황 추적 (Progress Tracking) 🔄
**User Story**: "사회복지사로서, 주간 체크인을 통해 환자의 목표 달성 현황을 실시간으로 추적하고 싶다"

**기능 상세**:
- **개선된 주간 체크인 시스템**:
  - 완료 여부 체크
  - 장애물 및 필요 지원 기록
  - 기분 평가 (1-5점)
  - 목표 완료 확인 대화상자
- **향상된 자동 진행률 계산**: 실제 완료된 목표 기반 계산
- **실시간 상위 목표 업데이트**: 하위 목표 완료 시 즉시 반영
- **진행 추적 UI 개선**: 직관적인 진행률 표시

**데이터 구조**: `weekly_check_ins`, `goal_evaluations` 테이블

### 7. 대시보드 및 분석 (Dashboard & Analytics) 🆕
**User Story**: "사회복지사로서, 담당 환자들의 전반적인 진행 상황을 한눈에 파악하고 싶다"

**기능 상세**:
- **탭형 대시보드 시스템**: Simple Dashboard + Advanced Dashboard
- **Simple Dashboard**:
  - 담당 환자 목록 및 진행 현황
  - 주간/월간 체크인 일정
  - 평균 달성률 및 추세
- **Advanced Dashboard** (새로 추가):
  - 상세 통계 및 트렌드 분석
  - 환자별 성과 비교
  - 목표 달성 패턴 분석
  - 예측 인사이트
- 환자별 상세 분석:
  - 목표 달성률 추이
  - 평가 점수 변화
  - AI 추천 활용도
- **관리자용 시스템 전체 통계**:
  - 사용자 관리 및 권한 설정
  - 시스템 사용 현황
  - 성과 지표 모니터링

**데이터 구조**: Views - `social_worker_dashboard`, `patient_current_progress`, `goal_metrics`

### 8. 서비스 기록 관리 (Service Records)
**User Story**: "사회복지사로서, 환자와의 상담 및 서비스 제공 내역을 체계적으로 기록하고 싶다"

**기능 상세**:
- 서비스 일시 및 소요 시간 기록
- 서비스 유형 및 카테고리 분류
- 개인/그룹 세션 구분
- 서비스 노트 작성

**데이터 구조**: `service_records` 테이블

### 9. 관리자 패널 (Admin Panel) 🆕
**User Story**: "관리자로서, 시스템 사용자와 권한을 효율적으로 관리하고 싶다"

**기능 상세**:
- **사용자 관리**: 등록, 수정, 삭제, 역할 할당
- **권한 관리**: 세분화된 권한 설정 및 관리
- **시스템 모니터링**: 사용 현황 및 성과 지표
- **데이터 관리**: 백업, 복원, 데이터 무결성 검사

## 🔧 Technical Architecture (대폭 개선됨) 🔄

### 새로운 단순화된 아키텍처
- **Backend Server 제거**: Express 서버 완전 제거 (1,900+ 줄 코드 삭제)
- **Serverless Architecture**: 완전한 프론트엔드 중심 설계
- **Direct API Integration**: n8n webhook 직접 호출
- **Package Optimization**: 363개 불필요한 패키지 제거 (1114개 → 751개)

### 기술 스택
- **Frontend**: React 19 + TypeScript + Vite
- **UI Framework**: Tailwind CSS + shadcn/ui
- **State Management**: TanStack Query (React Query) v5
- **Routing**: React Router v7
- **Database**: Supabase (PostgreSQL + Auth + Realtime)
- **AI Integration**: Direct N8N Webhook Integration
- **Charts**: Chart.js + Recharts
- **Development Tools**: 
  - Build Tool: Vite 6.x
  - Testing: Vitest + React Testing Library
  - Type Checking: TypeScript 5.8
  - Code Quality: ESLint + Prettier

### 데이터베이스 설계
- **PostgreSQL** (Supabase 호스팅)
- **주요 테이블**: 15개 (사용자, 환자, 평가, 목표, AI 추천, 권한 등)
- **보안**: Row Level Security (RLS) 전면 적용
- **최적화**: 복합 인덱스 및 계층적 쿼리 최적화
- **실시간**: Supabase Realtime 구독 활용

### 배포 아키텍처 (완전히 새로워짐)
- **Single Frontend Deployment**: Vercel 원클릭 배포
- **No Backend Server**: 서버 관리 복잡성 제거
- **Environment Variables**: 3개 핵심 변수만 설정
  - `VITE_SUPABASE_URL`
  - `VITE_SUPABASE_ANON_KEY`
  - `VITE_N8N_WEBHOOK_URL`
- **Automatic SSL**: Vercel 자동 HTTPS
- **CDN Integration**: 글로벌 성능 최적화

### 보안 아키텍처
- **Frontend Security Headers**: X-Frame-Options, X-Content-Type-Options 등
- **Authentication**: Supabase Auth with PKCE flow
- **Authorization**: Row Level Security + Permission-based access
- **Data Encryption**: 전송 중/저장 시 암호화

## 📊 Success Metrics (KPI)

### 정량적 지표
1. **사용률 지표**
   - AI 추천 기능 사용률 (목표: 80% 이상)
   - 주간 체크인 완료율 (목표: 90% 이상)
   - 다중 역할 활용률 (목표: 60% 이상)

2. **성과 지표**
   - 목표 달성률 (목표: 60% 이상)
   - 환자 재활 계획 완수율
   - 조기 중단률 감소 (목표: 20% 감소)

3. **기술적 지표** (새로 추가)
   - 페이지 로드 시간 (목표: 2초 이하)
   - API 응답 시간 (목표: 500ms 이하)
   - 시스템 가용성 (목표: 99.9% 이상)

### 정성적 지표
- 사회복지사 만족도 조사 (분기별)
- 시스템 사용성 평가 (SUS Score)
- 환자 피드백 (향후)

## 🚦 Implementation History & Current Status

### ✅ Completed (Phase 1-3)
**Phase 1: Foundation (완료)**
- ✅ Supabase 프로젝트 설정 및 DB 스키마 구축
- ✅ 다중 역할 인증 시스템 구현
- ✅ 기본 UI 프레임워크 구축 (shadcn/ui)
- ✅ 환자 등록 및 관리 시스템

**Phase 2: Core Features (완료)**
- ✅ 5단계 평가 시스템 구현
- ✅ AI 추천 기능 n8n 연동
- ✅ 계층적 목표 관리 시스템
- ✅ 주간 체크인 및 진행 추적

**Phase 3: Advanced Features (완료)**
- ✅ 탭형 대시보드 시스템 (Simple + Advanced)
- ✅ 관리자 패널 구축
- ✅ 권한 관리 시스템 고도화
- ✅ 백엔드 서버 제거 및 아키텍처 단순화

### 🔄 Current Phase: Optimization & Deployment
**목표**: 코드 품질 개선 및 프로덕션 배포 준비

**진행 상황**:
- ✅ **백엔드 제거 완료**: Express 서버 제거, 363개 패키지 최적화
- ✅ **배포 설정 완료**: Vercel 설정, 환경변수 템플릿
- 🔄 **코드 품질 개선**: ESLint 에러 990개 → 216개 (78% 감소)
  - ✅ Phase 1.1: 파싱 오류 10개 수정
  - ✅ Phase 1.2: any 타입 49개 개선
  - 🔄 Phase 2.1: 사용하지 않는 변수 95개 남음
  - ⏳ Phase 2.2: switch-case 블록 에러 12개
  - ⏳ Phase 3: React Hooks 최적화

## ⚠️ Risk Management

### 기술적 리스크
1. **데이터 일관성 문제**
   - 완화 방안: 트랜잭션 처리, 데이터 검증 로직 강화
   
2. **AI API 응답 지연**
   - 완화 방안: 실시간 폴링 시스템, 사용자 피드백 강화

3. **프론트엔드 의존성 증가**
   - 완화 방안: 적절한 에러 핸들링, 오프라인 대응책

### 비즈니스 리스크
1. **사용자 저항**
   - 완화 방안: 단계적 도입, 충분한 교육, 지속적 피드백

2. **데이터 보안**
   - 완화 방안: RLS 적용, 정기 보안 감사, HIPAA 준수

## 🔮 Future Enhancements

### 단기 (3-6개월)
- 환자용 모바일 앱 개발
- 고급 분석 기능 (예측 모델)
- PWA 전환 (오프라인 지원)
- 다국어 지원

### 장기 (6-12개월)
- 다기관 지원 (Multi-tenancy)
- AI 모델 고도화 (자체 학습)
- 원격 재활 프로그램 통합
- 병원 EMR 시스템 연동

## 👥 Team & Responsibilities

### 프로젝트 오너
- **박승현**: 기획 및 개발 총괄, 아키텍처 설계

### 개발 완료 현황
- **프론트엔드**: 100% 완료
- **백엔드**: N/A (서버리스 아키텍처)
- **데이터베이스**: 100% 완료
- **AI 연동**: 100% 완료
- **배포 준비**: 95% 완료

### 협력 필요 영역
- 임상 자문 (정신과 전문의)
- QA 테스트 (사회복지사 참여)
- 프로덕션 모니터링

## 📝 Deployment Guide

### 환경 요구사항
- **Node.js**: 18.x 이상
- **npm**: 9.x 이상
- **환경변수**: 3개 (Supabase URL, Anon Key, n8n Webhook URL)

### 배포 과정
1. **Vercel 연결**: GitHub 저장소 자동 연결
2. **환경변수 설정**: Vercel 대시보드에서 3개 변수 설정
3. **자동 배포**: 코드 푸시 시 자동 빌드 및 배포
4. **도메인 설정**: 커스텀 도메인 연결 (선택사항)

### 모니터링
- **Vercel Analytics**: 성능 및 사용량 모니터링
- **Supabase Dashboard**: 데이터베이스 상태 모니터링
- **n8n Monitoring**: AI 처리 상태 추적

## 📋 Appendix

### A. 아키텍처 변경 이력
- **v2.0**: Express + Supabase 하이브리드 구조
- **v3.0**: 완전한 서버리스 아키텍처로 전환
  - Express 서버 제거 (1,244줄 삭제)
  - 363개 불필요한 패키지 제거
  - 단일 프론트엔드 배포로 복잡성 90% 감소

### B. 데이터 보안 정책
- 환자 정보 암호화
- 접근 권한 관리 (RBAC + RLS)
- 정기적 백업 및 복구 계획

### C. 용어 정의
- **SMART 원칙**: Specific, Measurable, Achievable, Relevant, Time-bound
- **RLS**: Row Level Security
- **SUS**: System Usability Scale
- **PKCE**: Proof Key for Code Exchange

### D. 참고 자료
- Supabase 공식 문서
- n8n Webhook 문서
- 정신재활 가이드라인
- Vercel 배포 가이드

---

**문서 버전**: v3.0  
**최종 수정일**: 2025-06-21  
**작성자**: 박승현  

**주요 변경사항 (v2.0 → v3.0)**:
- 🔄 **아키텍처 혁신**: 백엔드 서버 완전 제거, 서버리스 구조 전환
- 🆕 **새로운 기능**: 관리자 패널, 탭형 대시보드, 다중 역할 지원
- 🔧 **기술 스택 업그레이드**: React 19, Vite 6, TanStack Query v5
- 📈 **성능 최적화**: 363개 패키지 제거, 1,900+ 줄 코드 삭제
- 🚀 **배포 간소화**: Vercel 원클릭 배포, 환경변수 3개로 단순화
- 🔍 **코드 품질**: ESLint 에러 78% 감소 (990개 → 216개)

**변경 이력**:
- v1.0 (2025-05-19): 초기 작성
- v1.1 ~ v1.5: 점진적 기능 추가 및 개선
- v2.0 (2025-06-05): 전면 재구성, DB 설계 통합, 실패 교훈 반영
- v3.0 (2025-06-21): 서버리스 아키텍처 전환, 고급 기능 완성, 배포 준비 완료