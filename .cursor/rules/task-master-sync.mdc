---
description:
globs:
alwaysApply: false
---
# Task Master 상태 동기화 관리

## **구현과 Task 상태 불일치 해결**

### **롤백 상황 처리**
- Git 롤백 또는 코드 삭제 시 Task Master 상태도 함께 업데이트 필요
- 실제 구현되지 않은 작업을 'done'으로 표시하지 않기

```bash
# ✅ DO: 롤백 후 Task 상태 수정
# 1. 롤백된 subtask들을 pending으로 변경
task-master set-status --id=13.6,13.7,13.8 --status=pending

# 2. subtask에 롤백 상황 기록
task-master update-subtask --id=13.6 --prompt="롤백으로 인해 실제 구현이 되지 않았음. 이전 구현 정보는 무효하고, 실제로는 아직 구현되지 않은 상태임."
```

### **구현 상태 확인 절차**
1. **코드 검증**: 실제 파일이 존재하고 작동하는가?
2. **기능 테스트**: 브라우저에서 실제로 작동하는가?
3. **Task 상태 확인**: Task Master 상태가 실제와 일치하는가?

## **체계적인 진행 상황 관리**

### **작업 시작 전 현황 파악**
```bash
# ✅ DO: 세션 시작 시 전체 상황 파악
task-master list --with-subtasks
task-master next
```

### **구현 중 실시간 업데이트**
```bash
# 작업 시작
task-master set-status --id=13.6 --status=in-progress

# 구현 과정 기록
task-master update-subtask --id=13.6 --prompt="구현 시작\n- 파일 생성: SystemLogViewer.tsx\n- 기본 구조 설정 완료"

# 완료 시
task-master set-status --id=13.6 --status=done
```

### **의존성 관리**
- 선행 작업이 실제로 완료되었는지 확인
- 다음 작업 진행 전 의존성 검증

```bash
# ✅ DO: 의존성 검증
task-master show 13.5  # 선행 작업 확인
# 실제 구현 상태 확인 후 다음 작업 진행
```

## **문제 발생 시 복구 절차**

### **구현과 Task 상태 불일치 발견 시**
1. **실제 구현 상태 조사**
   - 파일 시스템에서 실제 구현된 것 확인
   - 기능별 작동 여부 테스트

2. **Task 상태 조정**
   - 구현되지 않은 작업: `pending` 상태로 변경
   - 구현된 작업: `done` 상태 유지
   - 부분 구현: `in-progress` 상태로 설정

3. **기록 업데이트**
   - 롤백 사유와 현재 상태를 subtask에 기록
   - 향후 작업 계획 명시

### **대량 롤백 처리**
```bash
# ✅ DO: 여러 작업이 롤백된 경우
# 1. 범위 지정하여 상태 변경
task-master set-status --id=13.6,13.7,13.8 --status=pending

# 2. 전체적인 상황 업데이트
task-master update --from=13.6 --prompt="Git 롤백으로 인해 13.6부터의 작업들이 실제로는 구현되지 않음. 코드 검토 결과 실제 구현된 것과 Task 상태 불일치 발견."
```

## **예방 조치**

### **정기적인 동기화 검증**
```bash
# 주기적으로 실행할 검증 명령들
task-master list --status=done  # 완료로 표시된 작업들 확인
git log --oneline -10           # 최근 커밋 내역과 비교
npm run dev                     # 실제 작동 여부 확인
```

### **작업 완료 시 체크리스트**
1. [ ] 코드가 실제로 작성되고 커밋되었는가?
2. [ ] 브라우저에서 정상 작동하는가?
3. [ ] 관련 파일들이 모두 존재하는가?
4. [ ] Task Master 상태가 올바르게 업데이트되었는가?
5. [ ] 다음 작업의 의존성이 충족되었는가?

## **협업 시 주의사항**

### **브랜치 작업 시**
- 브랜치별로 Task 상태가 다를 수 있음
- 메인 브랜치 병합 시 Task 상태 재검증 필요

### **충돌 해결**
- Task 파일 충돌 시 실제 구현 상태 기준으로 해결
- `task-master move` 명령으로 ID 충돌 해결

```bash
# Task ID 충돌 해결 예시
task-master move --from=15,16,17 --to=20,21,22
```

## **모니터링 및 리포팅**

### **주간 동기화 점검**
```bash
# 전체 프로젝트 상태 점검
task-master complexity-report
task-master validate-dependencies
```

### **문제 패턴 추적**
- 자주 발생하는 불일치 패턴 기록
- 원인 분석 및 예방 방안 수립
- 팀 내 공유 및 프로세스 개선

## **성공 사례**

이 프로젝트에서 성공적으로 처리한 동기화 문제:

1. **Task 13.6-13.8 롤백 처리**: 실제 구현되지 않은 상태를 정확히 반영
2. **Subtask 상세 기록**: 롤백 사유와 현재 상태를 명확히 문서화
3. **단계적 복구**: 검증된 부분부터 차례대로 재구현

이런 경험을 바탕으로 앞으로는 더 체계적인 동기화 관리가 가능합니다.
